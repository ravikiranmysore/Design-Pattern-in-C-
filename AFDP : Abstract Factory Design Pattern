/*
AFDP : Abstract Factory Design Pattern
- defines an abstract class for creating families of
related objects,but without specifying their concrete subclass

Car factory - Concrete class - simple car, Luxuary car
Simple car - tire 1, body 1
Luxuary car - tire 2, body 2
CAR OBJECTS ARE SAME.

why and when:
- you need system to be independent of how objects are
created, composed and represented
- show interface not implementation
- system need to be configured with one of the multiple family of objects.


*/

#ifndef __io__
#define __io__
#include<iostream>
using namespace std;
#endif

#include "Car.cpp"

class CarFactory {
private:
	Car* car;
protected:
	virtual Tire* buildTire() = 0;
	virtual Body* buildBody() = 0;
public:
	virtual Car* buildWholeCar() = 0;
};
class SimpleCarFactory : public CarFactory {
	Tire* buildTire() {
		return new SimpleTire();
	}
	Body* buildBody() {
		return new SimpleBody();
	}
	Car* buildWholeCar()
	{
		Car* car = new Car("SimpleCar");
		car->setTire(buildTire());
		car->setBody(buildBody());
		return car;
	}
};

class LuxuaryCarFactory : public CarFactory {
	Tire* buildTire() {
		return new LuxuryTire();
	}
	Body* buildBody() {
		return new LuxuryBody();
	}
	Car* buildWholeCar()
	{
		Car* car = new Car("LuxuaryCar");
		car->setTire(buildTire());
		car->setBody(buildBody());
		return car;
	}
};

-----------------------------------
Car.cpp
----------
#ifndef __io__
#define __io__
#include<iostream>#
using namespace std;
#endif

class Tire {
protected:
	string name;
	int pressure;
public:
	Tire(string n, int pressure) :
		name(n), pressure(pressure) {};
	string getName() { return name; }
	int getPressure() { return pressure; }
};

class SimpleTire : public Tire {
public:
	SimpleTire() : Tire("SimpleTire", 75) {}
};
class LuxuryTire : public Tire {
public:
	LuxuryTire() : Tire("LuxuryTire", 100) {}
};

class Body {
protected:
	string name;
	int strength;
public:
	Body(string n, int strength) : name(n), strength(strength) {}
	string getName() { return name; }
	int getStrength() { return strength; }
};

class SimpleBody : public Body
{
public:
	SimpleBody() : Body("SimpleBody", 75) {}
};

class LuxuryBody : public Body {
public:
	LuxuryBody() : Body("LuxuryBody", 100) {}
};

class Car {
protected:
	string name;
	Tire* tire;
	Body* body;
public:
	Car(string n) : name(n) {}
	void setTire(Tire* t) { tire = t; }
	void setBody(Body* b) { body = b; }
	void printDetails() {
		cout << "Tire : " << tire->getName() << "Pressure :" << tire->getPressure() << endl;
		cout << "Body : " << body->getName() << "Strength :" << body->getStrength() << endl;
	}
};

-----------------------------------
source.cpp
----------
#ifndef __io__
#define __io__
#include<iostream>
using namespace std;
#endif

#include "CarFactory.cpp"
//#define SIMPLE_CAR 1
#define LUXUARY_CAR 1

int main()
{
#ifdef SIMPLE_CAR
	CarFactory* factory = new SimpleCarFactory;
#elif LUXUARY_CAR
	CarFactory* factory = new LuxuaryCarFactory;
#endif 

	Car* car = factory->buildWholeCar();
	car->printDetails();

	return  0;
}
